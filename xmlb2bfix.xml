<tool id="bismark2bedgraph" name="Bismark2bedGraph" version="0.14.3">
    <!-- -->
    <description>Methylation percentages reported from Bismark methylation extractor files</description>
    <!-- -->
    <requirements>
    </requirements>
    <stdio>
        <exit_code range="1:"  />
        <exit_code range=":-1" />
        <regex match="Error:" />
        <regex match="Exception:" />
    </stdio>
    <command interpreter="python">
<![CDATA[
        b2bpy.py

        ##Context files October 2015

        --bismark_path $/home/galaxy/tools/bismark/

        --input_file "${input_file}"

        ##
        ## Option parameters
        ##

        #if $remove_spaces:
            --remove_spaces
        #end if

        #if $params.settingsType == "custom":

            ## default 1
            --cutoff $params.cutoff
            ## default setting 2GB
            --buffer_size $params.buffer_size

            ## default OFF unless specified
            $params.scaffolds
            $params.ample_memory

            #if $params.zero_based:
                --zero_based
            #end if

        #end if

        ##
        ## Output parameters
        ##

        --output $output
        --coverage $coverage
     
        #if $zero_coverage
          --zero_coverage $zero_coverage
        #end if
]]></command>
    <inputs>
        <!-- Input Parameters -->
        <param name="input_file" type="data" format="tab,tabular,text,txt" label="File from bismark methylation extraction" />
        <param name="remove_spaces" type="boolean" truevalue="true" falsevalue="false" checked="False" label="Dependent on how you have saved your data: switch whitespaces in the Sequence ID column of Bismark Methylation Extractor files to underscores."/>

        <conditional name="params">
            <param name="settingsType" type="select" label="bismark2bedGraph settings to use" help="You can use default settings or set custom values for any of bismark2bedGraph's parameters.">
                <option value="default">Use Defaults</option>
                <option value="custom">Full parameter list</option>
            </param>
            <when value="default" />
                <!-- Full params. -->
            <when value="custom">
                <!-- cutoff -->
                <param name="cutoff" type="integer" value="1" label="Minimum number of times for a methylation state to be seen for a nucleotide before its methylation percentage is reported." />
                <!-- buffer_size -->
                <param name="buffer_size" type="text" value="2G" label="Specify the main memory buffer limit for methylation sorting." />
                <!-- scaffolds -->
                <param name="scaffolds" type="boolean" truevalue="--scaffolds" falsevalue="" checked="false" label="Enable if the Bisulfite Genome used for Bismark mapping was a scaffold" help="WARNING: Do not use in conjunction with the ample memory option." />
                <!-- ample_memory -->
                <param name="ample_memory" type="boolean" truevalue="--ample_memory" falsevalue="" checked="false" label="Enable to use two arrays for methylated and unmethylated calls instead of UNIX sort command to sort chromosome position" help="WARNING: Do not use in conjunction with the scaffolds option." />
                <!-- output Option: zero_based-->
                <param name="zero_based" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Offer an additional zero-based coverage file." />
            </when>
        </conditional>
    </inputs>


    <outputs>
        <!-- bedGraph and 1-based coverage (.cov)  -->
        <data format="bedGraph" name="output" label="${tool.name} on ${on_string}: Methylation Percentages">
        </data>
        <data format="cov" name="coverage" label="${tool.name} on ${on_string}: Methylation Counts">	
        </data>
        <!-- Additional optional zero-based coverage (.cov) -->
        <data format="zero.cov" name="zero_coverage" label="${tool.name} on ${on_string}: Methylation Counts (Zero-based)">
            <filter>
                ((params['settingsType'] == "custom" and
                  params['zero_based'] is True
                ))
            </filter>
        </data>
    </outputs>
    
    
    <tests>
    </tests>
    
    
    <help>
<![CDATA[

**What it does**

Bismark2bedGraph_ is a script of the Bismark package to provide detailed methylation
information in the form of a bedGraph file and a coverage file sorted by chromosomal 
position by using the positional methylation data generated by the Bismark methylation 
extractor.

.. _Bismark2bedGraph: http://www.bioinformatics.babraham.ac.uk/projects/bismark/

The bedGraph files use 0-based genomic start and 1-based genomic end coordinates, which 
should be UCSC compatible if you had used a UCSC reference genome as your bisulfite genome
for Bismark mapping alignment.

In addition, bismark2bedGraph will also write out a coverage file (.cov) which is similar in form 
to the bedGraph file, but instead uses 1-based genomic coordinates. The coverage file will
report the counts of methylated and unmethylated cytosines for any covered position; this
coverage file is required if you wish to generate a genome-wide cytosine report using 
coverage2cytosine, another Bismark package script.

Command line usage: bismark2bedGraph [options] -o <output filename> [methylation extractor input files]

Bismark is developed by Krueger F and Andrews SR. at the Babraham Institute. Krueger F, Andrews SR. (2011-2015) Bismark: a flexible aligner for bisulfite sequencing

------

**Note on input format and specifications**

bismark2bedgraph only accepts the tab-delimited format file from use of Bismark methylation extractor.
If you would like to provide more than one input file to the tool for a single bedGraph output, those files 
must be combined into a dataset beforehand as long as the input column format is maintained.

*Input format from Bismark methylation extraction for bismark2bedGraph:*

<seq-ID>  <methylation state*>  <chr>  <start pos (=end pos)>  <methylation call>

------

**Note on sorting specifications**

.. class:: warningmark

The '--CX/--CX_context' option is mandatory, regardless of using the tool for only CpG context
due to the automatic file-naming of datasets on Galaxy.

Please take into consideration the size of your datasets for sorting (--ample_memory, --buffer size, typically for clusters)
and the origins of your Bismark bisulfute genome reference if it is originally from a scaffold/contiguous/unfinished 
genome (--scaffolds).

It is preferable to specify the --buffer_size option in gigabyte units, depending on your available memory
for the sorting. Please contact your administrator for the allowed memory limits of your cluster.

------

**Outputs**

The output files are in the following format (tab-delimited)::

    Column  Description
    ------  -----------------------------------------
      1	    Chromosome
      2	    Start position
      3	    End position
      4	    Methylation percentage
      5	    Count methylated (coverage file only)
      6     Count nonmethylated (coverage file only)

    * bedGraph files are 0-based start coords, 1-based end coords.
    * coverage files are 1-based genomic coords
    * Optional additional coverage file is 0-based, half-open coords using '--zero-based'

------

**OPTIONS**

Input::

  -o/--output <filename>   Name of the output file, mandatory.

  --dir                    Output directory. Output is written to the current directory if not specified explicitly.
	
  --cutoff [threshold]     The minimum number of times a methlation states has to be seen for that nucleotide 
                           before its methylation percentage is reported. Default: 1.

  --CX/--CX_context        The sorted bedGraph output fle contains information on every single cytosine that was covered
                           in the experiment irrespective of its sequence context. This applies to both forward and
                           reverse strands. Please be aware that this option may generage large temporary files and output
                           files, and may take a long time to sort (up to many hours). Default: OFF.
                           (i.e. Default: CpG context only)
	
  --buffer_size <string>   This allows you to specify the main memory sort buffer when sorting the methylation information.
                           Either specify a percentage of physical memory by appending '%' (e.g. --buffer_size 50%)  or a 
                           multiple of 1024 bytes, e.g. 'K' multiples by 1024, 'M' multiplies by 1048576, and so on for 'T', etc. 
                           (e.g. --buffer_size 20G). For more information on sort type 'info sort' on a command line.
                           Defaults to 2G.

  --scaffolds/--gazillion  Users working with unfinished genomes sporting tens or even hundreds or thousands of
                           scaffolds/contigs/chromosomes frequently encountered errors with pre-sorting reads to
                           individual chromosome files. These errors were caused by the operating systems's limit
                           of the number of filehandle that can be written to at any one time (typically 1024; to
                           find out this number on Linux, type 'ulimit -a').
                           To bypass the limitation of open filehandles, the option --scaffolds does not pre-sort
                           methylation calls into individual chromosome files. Instead, all input files are 
                           temporarily merged into a single file (unless there is only a single file), and this
                           file will then be sorted by both chromosome AND position using the UNIX sort command.
                           Please be aware that this option might take a looooong time to complete, depending on
                           the size of the input files, and the memory you allocate to this process (see --buffer_size).
                           Nevertheless, it seems to be working.
								
  --ample_memory           Using this option will not sort the chromosomal positions using the UNIX 'sort' command, but will
                           instead use two arrays to sort methylated and unmethylated calls, respectively. This may result in 
                           a faster sorting process for very large files, but comes with a tradeoff cost of a larger memory
                           footprint (as an estimate, two arrays of the length of (the largest) human chromosome 1 (nearly
                           250 million bp) temporarily consume around 16 GB RAM). Note however that due to the overheads
                           of creating and looping through arrays this option might in fact be *slower* for small-ish files
                           (up to a few million alignments). Note also that this option is not currrently compatible with
                           options '--scaffolds/--gazillions'
	
  --zero_based             Write out an additional coverage file (ending in .zero.cov) that uses -based genomic start and
                           1-based genomic end coordinates (zero-based, half-open), like used in the bedGraph file, instead
                           of using 1-based coordinates throughout. Default: OFF

]]>
  </help>
  <citations>
      <citation type="doi">10.1093/bioinformatics/btr167</citation>
  </citations>
</tool>
